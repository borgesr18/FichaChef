import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

// ‚úÖ FUN√á√ÉO OFICIAL DO SUPABASE PARA MIDDLEWARE - ESLINT CORRIGIDO
export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

  // ‚úÖ VERIFICAR SE SUPABASE EST√Å CONFIGURADO
  if (!supabaseUrl || !supabaseKey) {
    console.log('üîß UpdateSession: Supabase n√£o configurado - permitindo acesso')
    return supabaseResponse
  }

  const pathname = request.nextUrl.pathname
  console.log('üîç UpdateSession: Processando rota:', pathname)

  // ‚úÖ ROTAS P√öBLICAS - SEMPRE PERMITIR
  const publicRoutes = ['/login', '/register', '/reset-password']
  if (publicRoutes.includes(pathname)) {
    console.log('üîì UpdateSession: Rota p√∫blica permitida:', pathname)
    return supabaseResponse
  }

  try {
    // ‚úÖ CRIAR CLIENTE SUPABASE PARA SERVIDOR
    const supabase = createServerClient(
      supabaseUrl,
      supabaseKey,
      {
        cookies: {
          getAll() {
            return request.cookies.getAll()
          },
          setAll(cookiesToSet) {
            // ‚úÖ CORRIGIDO: Removido par√¢metro 'options' n√£o utilizado
            cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))
            supabaseResponse = NextResponse.next({
              request,
            })
            cookiesToSet.forEach(({ name, value, options }) =>
              supabaseResponse.cookies.set(name, value, options)
            )
          },
        },
      }
    )

    // ‚úÖ VERIFICAR USU√ÅRIO AUTENTICADO
    const { data: { user }, error } = await supabase.auth.getUser()

    // ‚úÖ L√ìGICA PRINCIPAL: DASHBOARD REQUER AUTENTICA√á√ÉO
    if (pathname.startsWith('/dashboard')) {
      if (!user || error) {
        console.log('üîí UpdateSession: Usu√°rio n√£o autenticado, redirecionando para login')
        const redirectUrl = new URL('/login', request.url)
        redirectUrl.searchParams.set('redirect', pathname)
        return NextResponse.redirect(redirectUrl)
      } else {
        console.log('‚úÖ UpdateSession: Usu√°rio autenticado acessando dashboard:', user.email)
        return supabaseResponse
      }
    }

    // ‚úÖ OUTRAS ROTAS: PERMITIR ACESSO
    return supabaseResponse

  } catch (error) {
    console.error('‚ùå UpdateSession: Erro na verifica√ß√£o:', error)
    
    // ‚úÖ EM CASO DE ERRO, PERMITIR ACESSO PARA N√ÉO QUEBRAR O SISTEMA
    console.warn('üîß UpdateSession: Erro na autentica√ß√£o, permitindo acesso tempor√°rio')
    return supabaseResponse
  }
}

