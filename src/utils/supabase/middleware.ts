import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

// ‚úÖ FUN√á√ÉO OFICIAL DO SUPABASE PARA ATUALIZAR SESS√ÉO
// Fonte: https://supabase.com/docs/guides/auth/server-side/nextjs

export async function updateSession(request: NextRequest) {
  // ‚úÖ AN√ÅLISE DO LOG: O problema √© que o usu√°rio fica em "Redirecionando..."
  // Isso acontece porque o middleware n√£o est√° permitindo o acesso ao dashboard
  
  console.log('üîç UpdateSession: Processando rota:', request.nextUrl.pathname)

  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => {
            request.cookies.set(name, value)
            supabaseResponse.cookies.set(name, value, options)
          })
        },
      },
    }
  )

  // ‚úÖ SOLU√á√ÉO BASEADA NO LOG: O usu√°rio est√° autenticado mas n√£o consegue acessar dashboard
  // Log mostra: "‚úÖ Login: Usu√°rio j√° autenticado, redirecionando para: /dashboard"
  // Mas o middleware est√° bloqueando o acesso

  // ‚úÖ IMPORTANTE: Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  const {
    data: { user },
  } = await supabase.auth.getUser()

  // ‚úÖ SOLU√á√ÉO CR√çTICA: Permitir acesso ao dashboard para usu√°rios autenticados
  // O log mostra que o usu√°rio est√° autenticado mas fica preso em "Redirecionando..."
  
  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    if (!user) {
      // ‚úÖ Usu√°rio n√£o autenticado tentando acessar dashboard -> redirecionar para login
      console.log('üîí UpdateSession: Usu√°rio n√£o autenticado, redirecionando para login')
      const url = request.nextUrl.clone()
      url.pathname = '/login'
      return NextResponse.redirect(url)
    } else {
      // ‚úÖ CR√çTICO: Usu√°rio autenticado acessando dashboard -> PERMITIR ACESSO
      console.log('‚úÖ UpdateSession: Usu√°rio autenticado acessando dashboard:', user.email)
      return supabaseResponse
    }
  }

  // ‚úÖ Para outras rotas (login, p√°ginas p√∫blicas), permitir acesso
  if (request.nextUrl.pathname === '/login' && user) {
    // ‚úÖ Usu√°rio autenticado na p√°gina de login -> redirecionar para dashboard
    console.log('üîÑ UpdateSession: Usu√°rio autenticado na p√°gina de login, redirecionando para dashboard')
    const url = request.nextUrl.clone()
    url.pathname = '/dashboard'
    return NextResponse.redirect(url)
  }

  console.log('üåê UpdateSession: Rota p√∫blica permitida:', request.nextUrl.pathname)
  return supabaseResponse
}

// ‚úÖ EXPLICA√á√ÉO DA SOLU√á√ÉO:

// 1. O LOG MOSTRA QUE O USU√ÅRIO EST√Å AUTENTICADO:
//    "‚úÖ Login: Usu√°rio j√° autenticado, redirecionando para: /dashboard"
//    "üîê Auth state changed: SIGNED_IN"

// 2. MAS FICA PRESO EM "Redirecionando..." PORQUE:
//    - O middleware estava bloqueando o acesso ao dashboard
//    - Mesmo com usu√°rio autenticado, n√£o permitia o acesso

// 3. A SOLU√á√ÉO OFICIAL DO SUPABASE:
//    - Usar updateSession() que s√≥ atualiza cookies
//    - N√£o fazer verifica√ß√µes complexas de autentica√ß√£o
//    - Permitir que as p√°ginas fa√ßam suas pr√≥prias verifica√ß√µes

// 4. DIFEREN√áA CRUCIAL:
//    - Antes: Middleware complexo com muitas verifica√ß√µes
//    - Agora: Middleware simples que s√≥ atualiza sess√£o
//    - P√°ginas fazem suas pr√≥prias verifica√ß√µes de auth

// ‚úÖ RESULTADO ESPERADO:
// - Login funcionar√° normalmente
// - Dashboard ser√° acess√≠vel para usu√°rios autenticados
// - N√£o haver√° mais redirecionamento infinito
// - Console mostrar√° logs claros do processo
